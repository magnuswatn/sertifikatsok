from base64 import b64decode

import pytest

from sertifikatsok.cert import MaybeInvalidCertificate
from sertifikatsok.enums import (
    SEID,
    CertificateAuthority,
    CertificateRoles,
    CertificateStatus,
    CertType,
)
from sertifikatsok.ldap import LdapCertificateEntry, LdapServer
from sertifikatsok.qcert import QualifiedCertificate, QualifiedCertificateSet

from .testlib import read_pem_file


class TestQualifiedCertificateSet:
    def test_create_sets_from_certs_buypass(self) -> None:
        raw_certs = [
            b"MIIE9jCCA96gAwIBAgILCJd5oKmEUkJ3gEgwDQYJKoZIhvcNAQELBQAwSzELMAkGA1UEBhMCTk8xHTAbBgNVBAoMFEJ1eXBhc3MgQVMtOTgzMTYzMzI3MR0wGwYDVQQDDBRCdXlwYXNzIENsYXNzIDMgQ0EgMzAeFw0xNjA1MTkwOTEwMDZaFw0xOTA1MTkyMTU5MDBaMEsxCzAJBgNVBAYTAk5PMR4wHAYDVQQDDBVNQUdOVVMgSE9SU0fDhVJEIFdBVE4xHDAaBgNVBAUTEzk1NzgtNDA1MC0xMjcwOTE3ODMwggEfMA0GCSqGSIb3DQEBAQUAA4IBDAAwggEHAoH/AK8MnOchca7DKUMPO9bhR7vCKtXQ0CAPyKYbYLj+oXJNhrnLvObn+RDxUKu7W/Hv9lKT6cLiIydsx0kUxLasM+XfgR3P58hscEOa1fpiNRSSsR6N1qPRkMYKsn7VzIXnZKy9XLkO5dIXs/KABTFVi1rnZJo796pgrZLtLRwYmPlSJ9PYvsRpYWtocxmKvQ9DjNyvkwZujWWc/6NUoSOEz0B5jpEhZd+zj1uGg/jVcLAgPmBDkILZDXyYKiViQyIwyv49r0fvCCB+fPckjlPsMxNuELQ49N+DzL05mkYg/PjyLxLAAiSeTr58HyEUZ6oAZI3fhEsx1wVrcqYXGVblAgMBAAGjggHcMIIB2DAJBgNVHRMEAjAAMB8GA1UdIwQYMBaAFMzD+Ae3nG16TvWnKx0F+bNHHJHRMB0GA1UdDgQWBBQPue77gps3whPLs2QzX2sBovsrUjAOBgNVHQ8BAf8EBAMCA7gwFQYDVR0gBA4wDDAKBghghEIBGgEDATCBpQYDVR0fBIGdMIGaMC+gLaArhilodHRwOi8vY3JsLmJ1eXBhc3Mubm8vY3JsL0JQQ2xhc3MzQ0EzLmNybDBnoGWgY4ZhbGRhcDovL2xkYXAuYnV5cGFzcy5uby9kYz1CdXlwYXNzLGRjPU5PLENOPUJ1eXBhc3MlMjBDbGFzcyUyMDMlMjBDQSUyMDM/Y2VydGlmaWNhdGVSZXZvY2F0aW9uTGlzdDAmBgNVHREEHzAdgRtNYWdudXMuSG9yc2dhcmQuV2F0bkBuaG4ubm8wegYIKwYBBQUHAQEEbjBsMDMGCCsGAQUFBzABhidodHRwOi8vb2NzcC5idXlwYXNzLm5vL29jc3AvQlBDbGFzczNDQTMwNQYIKwYBBQUHMAKGKWh0dHA6Ly9jcnQuYnV5cGFzcy5uby9jcnQvQlBDbGFzczNDQTMuY2VyMBgGCCsGAQUFBwEDBAwwCjAIBgYEAI5GAQEwDQYJKoZIhvcNAQELBQADggEBALTVuchg7YWxFO7V2jpnnqzqm5XHMgWsP0I1J4uJIOluy7ASYYpctPfroHF7RLQrRnfyn9DljMPIDyCM+3TLNu01yrOfvBzECVx6khe2uyTmuQdkFKQ8O4UTvmKYJbv0rXkU2Kv1Uddj9CKWO79lt0o4/Ra/C19oHGCYdMW8+ACgEx8i0xmAqHiRo0znNxCkKgni1wHO/JTT/AxFjSWBn+VHwZOvZirPnNUlNtt1h8hIN1v7AQwpaVPtZlj35UY96mTzi3DctAnS2Vrv7hoKmfWjjVFE328cZqAGPW1wEEpLyHQqGlJ/lFxxiS2qy2NATPRj/sSBCtgBdpjQzRYv3BU=",
            b"MIIE9jCCA96gAwIBAgILCJd6/Mnn1W/ThmwwDQYJKoZIhvcNAQELBQAwSzELMAkGA1UEBhMCTk8xHTAbBgNVBAoMFEJ1eXBhc3MgQVMtOTgzMTYzMzI3MR0wGwYDVQQDDBRCdXlwYXNzIENsYXNzIDMgQ0EgMzAeFw0xNjA1MTkwOTEwMDZaFw0xOTA1MTkyMTU5MDBaMEsxCzAJBgNVBAYTAk5PMR4wHAYDVQQDDBVNQUdOVVMgSE9SU0fDhVJEIFdBVE4xHDAaBgNVBAUTEzk1NzgtNDA1MC0xMjcwOTE3ODMwggEfMA0GCSqGSIb3DQEBAQUAA4IBDAAwggEHAoH/AL3pxvD++dUoOO5vcvtoYaH6x8cC6RxrDWX4g/OsBlRY8XVh4xl1FFIQ22xHszDR9F2awV1sxFf7QWwrhWgatOnBP/SiWrd+U67XUmC8k1a0yhzv8s5KrfsSEAS9WJJ4d56NrL1I7XZ1Tdn0Axzvubx/4lCmcOwkia1BaWFNwtO1ghfbWEhgG398uiYTxPZOyMQB3Q7ccSiQyctJjHKaCmdVwcTpiXsUmhuhczuXybrQgFOFsVXTk7LBZn0LWvkuN7sLidFpd1JS3mB46aRMPl8gVYroitkuWiItAmwlGOozqZSLuhg4fN0rWToN1/dJJ2k6S7/eq+3dxieYa38FAgMBAAGjggHcMIIB2DAJBgNVHRMEAjAAMB8GA1UdIwQYMBaAFMzD+Ae3nG16TvWnKx0F+bNHHJHRMB0GA1UdDgQWBBSWnHcdaGuiQ+kNJSHyxaubo7maoDAOBgNVHQ8BAf8EBAMCBkAwFQYDVR0gBA4wDDAKBghghEIBGgEDATCBpQYDVR0fBIGdMIGaMC+gLaArhilodHRwOi8vY3JsLmJ1eXBhc3Mubm8vY3JsL0JQQ2xhc3MzQ0EzLmNybDBnoGWgY4ZhbGRhcDovL2xkYXAuYnV5cGFzcy5uby9kYz1CdXlwYXNzLGRjPU5PLENOPUJ1eXBhc3MlMjBDbGFzcyUyMDMlMjBDQSUyMDM/Y2VydGlmaWNhdGVSZXZvY2F0aW9uTGlzdDAmBgNVHREEHzAdgRtNYWdudXMuSG9yc2dhcmQuV2F0bkBuaG4ubm8wegYIKwYBBQUHAQEEbjBsMDMGCCsGAQUFBzABhidodHRwOi8vb2NzcC5idXlwYXNzLm5vL29jc3AvQlBDbGFzczNDQTMwNQYIKwYBBQUHMAKGKWh0dHA6Ly9jcnQuYnV5cGFzcy5uby9jcnQvQlBDbGFzczNDQTMuY2VyMBgGCCsGAQUFBwEDBAwwCjAIBgYEAI5GAQEwDQYJKoZIhvcNAQELBQADggEBALXjkDT7jgGl25iYzkeeV3Me0w5p6PKnYLO/msuX8HysxdeBDVmdFop8f3kqDVPCGlr9yBScYw6hpRTMPuF0DCjfoTiPzhR0yA4XtaZcg7jsW6c39lBEGXKL0BvnDKURCYNGTh/QNRxQcx2L1u5cX/8+caHdTo8WHW5R9tR7Rf3GofleyvR1u8OUJQlK26RTxtOvR4/8GysY+a7WGOibsoHGX9fPR5Vw0ifWMnDlEiW9sVvBvugzuCEWTmbt2yBIhKJTb3G5YwWgUqEWhRQabAfIEQMdsI/UgcpUfn5Ld7rRcS0MG/uRO4qmzTMtvBqXQy4RAyVxQUiyzGoYLCNJ/4M=",
            b"MIIFFTCCA/2gAwIBAgILDnnC8JiRTBwjOgowDQYJKoZIhvcNAQELBQAwSzELMAkGA1UEBhMCTk8xHTAbBgNVBAoMFEJ1eXBhc3MgQVMtOTgzMTYzMzI3MR0wGwYDVQQDDBRCdXlwYXNzIENsYXNzIDMgQ0EgMzAeFw0xOTA1MTYwODMyMTZaFw0yMjA1MTkyMTU5MDBaMEsxCzAJBgNVBAYTAk5PMR4wHAYDVQQDDBVNQUdOVVMgSE9SU0fDhVJEIFdBVE4xHDAaBgNVBAUTEzk1NzgtNDA1MC0xMjcwOTE3ODMwggEfMA0GCSqGSIb3DQEBAQUAA4IBDAAwggEHAoH/ANfeSLe4+rI2cuUlCfmZN/hPusP7wCtACuHICnt/tmCpZayjhvslw3/h3Wuie3W6878MeLqNqCNpayUWR1eCXwSXpTS1z3HWRp5UNzzFGlZW8rHOcdEO65WP7I8tDzlpOCWUP8m+eUeqF6YHy7drQQoLB3bgilIwms5xZiTFYVkbmAIsbp+v656vSXLNy7ayzm85uavBj1IHRo7wwIGxfS+Zz3nNfDHdG2th0S09e/TYTub31YLDJkUpG/Q3VSXcs1YQgiFFZluklRetgaYvCYYDsYDk/Mt2JNfSspEJN7h1rTPqgNF9esZYUVXh2wJ1ncFPMOasr22TjWtJhkGrAgMBAAGjggH7MIIB9zAJBgNVHRMEAjAAMB8GA1UdIwQYMBaAFMzD+Ae3nG16TvWnKx0F+bNHHJHRMB0GA1UdDgQWBBQ7V5zUj6FoIwRceGb007CKRMK/4zAOBgNVHQ8BAf8EBAMCA7gwHQYDVR0lBBYwFAYIKwYBBQUHAwIGCCsGAQUFBwMEMBUGA1UdIAQOMAwwCgYIYIRCARoBAwEwgaUGA1UdHwSBnTCBmjAvoC2gK4YpaHR0cDovL2NybC5idXlwYXNzLm5vL2NybC9CUENsYXNzM0NBMy5jcmwwZ6BloGOGYWxkYXA6Ly9sZGFwLmJ1eXBhc3Mubm8vZGM9QnV5cGFzcyxkYz1OTyxDTj1CdXlwYXNzJTIwQ2xhc3MlMjAzJTIwQ0ElMjAzP2NlcnRpZmljYXRlUmV2b2NhdGlvbkxpc3QwJgYDVR0RBB8wHYEbTWFnbnVzLkhvcnNnYXJkLldhdG5AbmhuLm5vMHoGCCsGAQUFBwEBBG4wbDAzBggrBgEFBQcwAYYnaHR0cDovL29jc3AuYnV5cGFzcy5uby9vY3NwL0JQQ2xhc3MzQ0EzMDUGCCsGAQUFBzAChilodHRwOi8vY3J0LmJ1eXBhc3Mubm8vY3J0L0JQQ2xhc3MzQ0EzLmNlcjAYBggrBgEFBQcBAwQMMAowCAYGBACORgEBMA0GCSqGSIb3DQEBCwUAA4IBAQALV4gfBoBlMqx305kizyuPNGpVrSw62WOzK6V3xUjutmEP+PHxy29B1M5UcpzY6AJz/jqZ15KcpayIuZ7k4pOH3NH4lsPEQZN/BNXXrimelwg4sbZlR+s4wcOTdCIQV9y7qFhyZ1BbG7egxt5tmCPPma4yI1E25V20q3mNB8JbUVhBDtpzKDZXvaTBMn4Ezcv4VDVhqp52aNGtVJcpr5vHzW+LMcO3Wp6B9yMkvqhyaKW6S2m46jHpkf1VCUXOIHrQbSAuEmPv2k2RjkCobSfys/qWPxeJPdyZKqTByIPfqBZLA5zEvZcNVuIoDUFTDCjegDSlF2DgKPmu8+1o0CBW",
            b"MIIFFTCCA/2gAwIBAgILDnnDeGsvD68z+vswDQYJKoZIhvcNAQELBQAwSzELMAkGA1UEBhMCTk8xHTAbBgNVBAoMFEJ1eXBhc3MgQVMtOTgzMTYzMzI3MR0wGwYDVQQDDBRCdXlwYXNzIENsYXNzIDMgQ0EgMzAeFw0xOTA1MTYwODMyMTdaFw0yMjA1MTkyMTU5MDBaMEsxCzAJBgNVBAYTAk5PMR4wHAYDVQQDDBVNQUdOVVMgSE9SU0fDhVJEIFdBVE4xHDAaBgNVBAUTEzk1NzgtNDA1MC0xMjcwOTE3ODMwggEfMA0GCSqGSIb3DQEBAQUAA4IBDAAwggEHAoH/ANQ5nut245t3bCI+4jLCoZlNCGMq7Zx0QzB/htZ8E3a+ESHXEEVfrkNM0kkEvsLF3t9faIP+ExC85/W41OIzqso0kSrY8b2DI+l1XFz1TbXxrQIY/wH45ETlsuWdqmSokSQsMMGhqMWlzzApGRkDveBqqkttEmCN5tFA179/WFgthGA0sxAiYoiuPdNQ3hAxTxzSL8oSB1dXsslbRdiBYPckfN9yOXJ7eJIEPeJumcWoPu1p2A9eXgfIqPd+mpGNIOz81mxS9SUYk8fgBSXbfz2WS6YavsyihRfJ/IrY/bbm0bsObkFcyfRY7k3d5wieFCyu4zF9q4HrqThqlaKhAgMBAAGjggH7MIIB9zAJBgNVHRMEAjAAMB8GA1UdIwQYMBaAFMzD+Ae3nG16TvWnKx0F+bNHHJHRMB0GA1UdDgQWBBRf7wWXJds2PAJmnDvtPots4T67KjAOBgNVHQ8BAf8EBAMCBkAwHQYDVR0lBBYwFAYIKwYBBQUHAwIGCCsGAQUFBwMEMBUGA1UdIAQOMAwwCgYIYIRCARoBAwEwgaUGA1UdHwSBnTCBmjAvoC2gK4YpaHR0cDovL2NybC5idXlwYXNzLm5vL2NybC9CUENsYXNzM0NBMy5jcmwwZ6BloGOGYWxkYXA6Ly9sZGFwLmJ1eXBhc3Mubm8vZGM9QnV5cGFzcyxkYz1OTyxDTj1CdXlwYXNzJTIwQ2xhc3MlMjAzJTIwQ0ElMjAzP2NlcnRpZmljYXRlUmV2b2NhdGlvbkxpc3QwJgYDVR0RBB8wHYEbTWFnbnVzLkhvcnNnYXJkLldhdG5AbmhuLm5vMHoGCCsGAQUFBwEBBG4wbDAzBggrBgEFBQcwAYYnaHR0cDovL29jc3AuYnV5cGFzcy5uby9vY3NwL0JQQ2xhc3MzQ0EzMDUGCCsGAQUFBzAChilodHRwOi8vY3J0LmJ1eXBhc3Mubm8vY3J0L0JQQ2xhc3MzQ0EzLmNlcjAYBggrBgEFBQcBAwQMMAowCAYGBACORgEBMA0GCSqGSIb3DQEBCwUAA4IBAQArmYQnwTNhNGWPzBDJ3N9DLI/ngXe2bk4amykZjiNqHchE8NKBA/u7qUhubVzVP3MEJpNuYvEL4xL2sDxFy26kskLp5zAWGo6e9wVVVNrs3Qm4vktOTJnyoBisGLlUu+9EtN2/fHqdKbmi7//hMrJU8833/inPNKph/mCjxgOEMNAtl7vGNJ/vNa+9hyCnTbLafgXN/ZWxTdbb3DEZ6aAxLZvWNU6s8RqgR4h5Lank5XKHFbj9javPE5yDu9W09XUasKKrRVq4mAoihg63xqTi9Sgfgaclzk5ELwEqmGwuxCETWLLKcONgH91StTiGK/i4sPRbv5Mad1IWSNKhIudm",
        ]
        certs = [
            QualifiedCertificate(
                MaybeInvalidCertificate.create(b64decode(cert)),
                LdapCertificateEntry(
                    "",
                    b64decode(cert),
                    None,
                    LdapServer("", "", CertificateAuthority.BUYPASS, []),
                ),
                CertificateStatus.EXPIRED,
                None,
            )
            for cert in raw_certs
        ]

        cert_sets = QualifiedCertificateSet.create_sets_from_certs(certs)
        assert len(cert_sets) == 2

    def test_create_sets_from_certs_commfides(self) -> None:
        raw_certs = [
            b"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",
            b"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",
            b"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",
        ]
        certs = [
            QualifiedCertificate(
                MaybeInvalidCertificate.create(b64decode(cert)),
                LdapCertificateEntry(
                    "",
                    b64decode(cert),
                    None,
                    LdapServer("", "", CertificateAuthority.COMMFIDES, []),
                ),
                CertificateStatus.EXPIRED,
                None,
            )
            for cert in raw_certs
        ]

        cert_sets = QualifiedCertificateSet.create_sets_from_certs(certs)
        assert len(cert_sets) == 1

    def test_create_sets_from_certs_commfides_encryption_issued_later(self) -> None:
        raw_certs = [
            b"MIIFkzCCBHugAwIBAgIIRx7KeRgmtHYwDQYJKoZIhvcNAQELBQAwgaMxJzAlBgNVBAMTHkNQTiBQZXJzb24gSGlnaCBTSEEyNTYgQ0xBU1MgMzFAMD4GA1UECxM3Q29tbWZpZGVzIFRydXN0IEVudmlyb25tZW50IChjKSAyMDExIENvbW1maWRlcyBOb3JnZSBBUzEpMCcGA1UEChMgQ29tbWZpZGVzIE5vcmdlIEFTIC0gOTg4IDMxMiA0OTUxCzAJBgNVBAYTAk5PMB4XDTE1MDQyMjIyMDAwMFoXDTE4MDUwNzIxNTk1OVowTTEeMBwGA1UEAwwVTUFHTlVTIEhPUlNHw4VSRCBXQVROMR4wHAYDVQQFExU5NTc4LTQ1MDUtMDAwMDExcEZhdUcxCzAJBgNVBAYTAk5PMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAoFeDkW1SrfD8o0V92dClQrxKnL+k7e/5QPjDdC+P6/IkK8Yjb0a/Wz7qYwRcPadrcULhtbjoe3KMqhxR4uagbPwEW2apc9WZ1irnAk0oQzf6dBSLfSpu+Ag3ESCZiYVySYs/2ZErp787KKQ6HxLFj2mDd0uo/loxhcbZCAI9jTbYvaY8am1AusMbhCN0QJ9prdK7lm2NNOXkw9psdNuyOEGG/6jYWUrL80OKT5EoKs7pd57uQggE9J8CBC8prATapkDa9cSC4/FwpQKXgiJC/I7mzh+o67oBn47K0FS5z/sBcUs+l4iI5hO8LeCwMDKt/Q1BkSNJAy4dPBJABXeAwQIDAQABo4ICHjCCAhowgcsGCCsGAQUFBwEBBIG+MIG7MEUGCCsGAQUFBzAChjlodHRwOi8vY3JsMS5jb21tZmlkZXMuY29tL0NvbW1maWRlc1BlcnNvbi1IaWdoLVNIQTI1Ni5jcnQwRQYIKwYBBQUHMAKGOWh0dHA6Ly9jcmwyLmNvbW1maWRlcy5jb20vQ29tbWZpZGVzUGVyc29uLUhpZ2gtU0hBMjU2LmNydDArBggrBgEFBQcwAYYfaHR0cDovL29jc3AxLmNvbW1maWRlcy5jb20vb2NzcDAdBgNVHQ4EFgQUdmlgCkQVEUQLY6IZwDvgLdZ4CwYwDAYDVR0TAQH/BAIwADAfBgNVHSMEGDAWgBS+rqevuNbcbX7qnDb7mGxv7b+OwzAWBgNVHSAEDzANMAsGCWCEQgEdDAEBADCBjQYDVR0fBIGFMIGCMD+gPaA7hjlodHRwOi8vY3JsMS5jb21tZmlkZXMuY29tL0NvbW1maWRlc1BlcnNvbi1IaWdoLVNIQTI1Ni5jcmwwP6A9oDuGOWh0dHA6Ly9jcmwyLmNvbW1maWRlcy5jb20vQ29tbWZpZGVzUGVyc29uLUhpZ2gtU0hBMjU2LmNybDAOBgNVHQ8BAf8EBAMCB4AwKQYDVR0lBCIwIAYIKwYBBQUHAwIGCCsGAQUFBwMEBgorBgEEAYI3FAICMBkGA1UdEQQSMBCBDm1hZ251c0B3YXRuLm5vMA0GCSqGSIb3DQEBCwUAA4IBAQCS8G+LB15ImlSyqcKPFJ3F6tFvlX6bu3PwoPcbRcMBah4seTXB9H/g6agSVVdTlqNrGCcHEx9hsiCFwkmV23pVOhsO2sfi11S8xXeHJOrinqtDnE0BKtSqshIVSWGVfftgAdM2rgwsxnx2BjCLlU28/1plJIVmEV6LPFkJi9oD3FnZHK9y3qwCNOqKFgU6WNuiA2N9CfTYTXf8P4mNAoHHJ7mVqgUn6BHYHUQqSUTJKX4+QFpmH71svAAm/yBxiz6CKRg9B5lwBioC3WDj5ThU7x8WYeO++mdlHkX6Cz5lWShpFwdZMYYX2jM1VkIW21KNgcjnktu8CPbbiOLZps9W",
            b"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",
            b"MIIFhzCCBG+gAwIBAgIIEBKG1OCr370wDQYJKoZIhvcNAQELBQAwgaMxJzAlBgNVBAMTHkNQTiBQZXJzb24gSGlnaCBTSEEyNTYgQ0xBU1MgMzFAMD4GA1UECxM3Q29tbWZpZGVzIFRydXN0IEVudmlyb25tZW50IChjKSAyMDExIENvbW1maWRlcyBOb3JnZSBBUzEpMCcGA1UEChMgQ29tbWZpZGVzIE5vcmdlIEFTIC0gOTg4IDMxMiA0OTUxCzAJBgNVBAYTAk5PMB4XDTE1MDQyMzEyMTIxMFoXDTI0MTIzMTA5MTczOFowTTEeMBwGA1UEAwwVTUFHTlVTIEhPUlNHw4VSRCBXQVROMR4wHAYDVQQFExU5NTc4LTQ1MDUtMDAwMDFjYm1qVzIxCzAJBgNVBAYTAk5PMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArvUwlR6IlCakRj1/+n+9aYLFsSEbgPY8Tbz4CkAStl0Ln3J+iCCQ0QIP85ic5AFFze+4XRJUbWl0cvxMv1Ya+zcAFXtkrsgseLj0RhpwpYlMm55VZ9Vis1H8eDMkCSqrI74BxJqu9A/5rl4tdjaM4GnbTkCa6nr19/dtSszNeyD2puJntL/tM2CV9zjIdKEPTAmkLOxLJj5DN/hsejF9JkTPp9jiWjZqjmbk7buBY9S6vK7ZUcB+dPfL9SPhdyS+WO01Tf8dHcZRnvJrJ0q0EE4raSHQ9iQuYzwubjZ5dNojwXZ6hVI76kkwzFWCYZd3pEbIAkv0npunHFcuqpSCjQIDAQABo4ICEjCCAg4wgcsGCCsGAQUFBwEBBIG+MIG7MEUGCCsGAQUFBzAChjlodHRwOi8vY3JsMS5jb21tZmlkZXMuY29tL0NvbW1maWRlc1BlcnNvbi1IaWdoLVNIQTI1Ni5jcnQwRQYIKwYBBQUHMAKGOWh0dHA6Ly9jcmwyLmNvbW1maWRlcy5jb20vQ29tbWZpZGVzUGVyc29uLUhpZ2gtU0hBMjU2LmNydDArBggrBgEFBQcwAYYfaHR0cDovL29jc3AxLmNvbW1maWRlcy5jb20vb2NzcDAdBgNVHQ4EFgQUcms8r30k6/kDg7SpWS1OiewBgkcwDAYDVR0TAQH/BAIwADAfBgNVHSMEGDAWgBS+rqevuNbcbX7qnDb7mGxv7b+OwzAWBgNVHSAEDzANMAsGCWCEQgEdDAEBADCBjQYDVR0fBIGFMIGCMD+gPaA7hjlodHRwOi8vY3JsMS5jb21tZmlkZXMuY29tL0NvbW1maWRlc1BlcnNvbi1IaWdoLVNIQTI1Ni5jcmwwP6A9oDuGOWh0dHA6Ly9jcmwyLmNvbW1maWRlcy5jb20vQ29tbWZpZGVzUGVyc29uLUhpZ2gtU0hBMjU2LmNybDAOBgNVHQ8BAf8EBAMCAzgwHQYDVR0lBBYwFAYIKwYBBQUHAwIGCCsGAQUFBwMEMBkGA1UdEQQSMBCBDm1hZ251c0B3YXRuLm5vMA0GCSqGSIb3DQEBCwUAA4IBAQA1gpknsYEJiB5dyacofCRnUgFeai2iFZpTjnlLZijaTzTrTThfY2lp4dyC5ZURDeD/EBwVm/mqJkiwSKrPdCnUpXlhvqLfL/TprsJruBrI7dcv5qewjpVGsaBD/jrCBro6IGhq56bZyJKwwkM44hmKAthyyHXfS/beS6pO7DRk0JxuADcJ9n193WpMuVpgoLJbMR/DGggJWSrzCBALQS3sksGOk80cXjTSCnXtppIu97ZF0odL/nwz4sp3YGMsZd958q+gOlumfvLG/T7NQHwNpA+qFG+QCQLEv0MvzpWCnpZL/lvv/jdws0PSiF4Lg/6eVJ/QTN2665JGIm4Axbnr",
        ]
        certs = [
            QualifiedCertificate(
                MaybeInvalidCertificate.create(b64decode(cert)),
                LdapCertificateEntry(
                    "",
                    b64decode(cert),
                    None,
                    LdapServer("", "", CertificateAuthority.COMMFIDES, []),
                ),
                CertificateStatus.EXPIRED,
                None,
            )
            for cert in raw_certs
        ]

        cert_sets = QualifiedCertificateSet.create_sets_from_certs(certs)
        assert len(cert_sets) == 1

    def test_create_sets_from_certs_commfides_encryption_issued_much_later(
        self,
    ) -> None:
        raw_certs = [
            b"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",
            b"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",
            b"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",
        ]
        certs = [
            QualifiedCertificate(
                MaybeInvalidCertificate.create(b64decode(cert)),
                LdapCertificateEntry(
                    "",
                    b64decode(cert),
                    None,
                    LdapServer("", "", CertificateAuthority.COMMFIDES, []),
                ),
                CertificateStatus.OK,
                None,
            )
            for cert in raw_certs
        ]

        cert_sets = QualifiedCertificateSet.create_sets_from_certs(certs)
        assert len(cert_sets) == 1

    def test_create_sets_from_certs_commfides_grouped_by_type(self) -> None:
        raw_certs = [
            # auth
            b"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",
            b"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",
            b"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",
            # sign
            b"MIIGWzCCBUOgAwIBAgIIQEeN6y8ThQYwDQYJKoZIhvcNAQELBQAwgfExPDA6BgNVBAMTM0NvbW1maWRlcyBDUE4gRW50ZXJwcmlzZS1Ob3J3ZWdpYW4gU0hBMjU2IENBIC0gVEVTVDFGMEQGA1UECxM9Q29tbWZpZGVzIFRydXN0IEVudmlyb25tZW50KEMpIDIwMTQgQ29tbWZpZGVzIE5vcmdlIEFTIC0gVEVTVDExMC8GA1UECxMoQ1BOIEVudGVycHJpc2UtTm9yd2VnaWFuIFNIQTI1NiBDQS0gVEVTVDEpMCcGA1UEChMgQ29tbWZpZGVzIE5vcmdlIEFTIC0gOTg4IDMxMiA0OTUxCzAJBgNVBAYTAk5PMB4XDTE1MTAyMjIyMDAwMFoXDTE4MTEwNjIyNTk1OVowgbQxGjAYBgNVBAMTEU55a3RlciBMZWdla29udG9yMRIwEAYDVQQFEwk1MDAwMDAwMDMxLDAqBgNVBAsTI0hlbHNlZGlyZWt0b3JhdGV0IE55a3RlciBsZWdla29udG9yMSYwJAYDVQQKEx1OeWt0ZXIgTGVnZWtvbnRvciAtIDUwMDAwMDAwMzEfMB0GA1UEBxMWVGVzdHZlaWVuIDEsIDAxMDEgT3NsbzELMAkGA1UEBhMCTk8wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCAAdq+PW6OKlfOKtvbuSQ4ANjygttCzv3IFLBjFQegShCwZltvBNj9EEEqmfhCBl4qSYiJ49TfMJcFszlh+bDgh9/zOitCoHojt8X84Vhf9YuY2OmxrFd2I1FsRXfYht+4O9mMaVTkDAELEYR4hkFwDvdebzeFi9Rp4RoNrz7Lvw8yaM4/gLkDe7tHh4HPlAKT1sFcJ8IjYCMyTK4K723UHRHJdxZFGIWSVgfs7+mABmrgyJTSUBhswJHXxLAEBj1+A3rhEC8PS6PxbGdwGEbT0cMwVyJ+rSqXciVEYCNRDXb1if5auNTJI37YojUPxTRVBqA7PZ+GigAQCUDCYId/AgMBAAGjggIwMIICLDAOBgNVHQ8BAf8EBAMCBkAwgdgGCCsGAQUFBwEBBIHLMIHIMEkGCCsGAQUFBzAChj1odHRwOi8vY3JsMS50ZXN0LmNvbW1maWRlcy5jb20vQ29tbWZpZGVzRW50ZXJwcmlzZS1TSEEyNTYuY3J0MEkGCCsGAQUFBzAChj1odHRwOi8vY3JsMi50ZXN0LmNvbW1maWRlcy5jb20vQ29tbWZpZGVzRW50ZXJwcmlzZS1TSEEyNTYuY3J0MDAGCCsGAQUFBzABhiRodHRwOi8vb2NzcDEudGVzdC5jb21tZmlkZXMuY29tL29jc3AwHQYDVR0OBBYEFOI3UAPtE088POl69qMCfMC4bBDDMAwGA1UdEwEB/wQCMAAwHwYDVR0jBBgwFoAUf7LWLWVuUPwrawyThyVylPYARC8wFwYDVR0gBBAwDjAMBgpghEIBHYcRAQEAMIGVBgNVHR8EgY0wgYowQ6BBoD+GPWh0dHA6Ly9jcmwxLnRlc3QuY29tbWZpZGVzLmNvbS9Db21tZmlkZXNFbnRlcnByaXNlLVNIQTI1Ni5jcmwwQ6BBoD+GPWh0dHA6Ly9jcmwyLnRlc3QuY29tbWZpZGVzLmNvbS9Db21tZmlkZXNFbnRlcnByaXNlLVNIQTI1Ni5jcmwwJwYDVR0lBCAwHgYIKwYBBQUHAwEGCCsGAQUFBwMCBggrBgEFBQcDBDAXBgNVHREEEDAOgQxwb3N0QHRlc3Qubm8wDQYJKoZIhvcNAQELBQADggEBAEoFzpSCLKmQ37ZNci/2X0rEpPpjs6DgUS8bX6+qgKBbFAT+Wv8WM4/yDA1/geJ5bsZoxijt6B7cAwhdDKzzPOFvnXIroFtkmmFehPAoZm21Xgzejyb74etkhTFppF8HSAlgErVtXTUmRd+ybXrYbqY/2SchCkM/BuLS5bQ6IE7Cnjx+kY8PEBKs/pmU8Gwl/Nd4mUBzjetGbdwVwygooWieJKgztduU8VG03VnNA8qq/RqwjZ3wVqnxirMUeOq09N5E4UM1J6OY6721vrZRpghhuwIDa624vkzj3ZRii+CCv9WvY2vHnUp9RyxX1lu0kXJD8lno41CtX9fI0M+yZ+w=",
            b"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",
            b"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",
            # crypt
            b"MIIGWzCCBUOgAwIBAgIIdJ48DyNfGlAwDQYJKoZIhvcNAQELBQAwgfExPDA6BgNVBAMTM0NvbW1maWRlcyBDUE4gRW50ZXJwcmlzZS1Ob3J3ZWdpYW4gU0hBMjU2IENBIC0gVEVTVDFGMEQGA1UECxM9Q29tbWZpZGVzIFRydXN0IEVudmlyb25tZW50KEMpIDIwMTQgQ29tbWZpZGVzIE5vcmdlIEFTIC0gVEVTVDExMC8GA1UECxMoQ1BOIEVudGVycHJpc2UtTm9yd2VnaWFuIFNIQTI1NiBDQS0gVEVTVDEpMCcGA1UEChMgQ29tbWZpZGVzIE5vcmdlIEFTIC0gOTg4IDMxMiA0OTUxCzAJBgNVBAYTAk5PMB4XDTE1MTAyMzExNTMzOFoXDTIyMTAwMzEyNTM0NFowgbQxGjAYBgNVBAMTEU55a3RlciBMZWdla29udG9yMRIwEAYDVQQFEwk1MDAwMDAwMDMxLDAqBgNVBAsTI0hlbHNlZGlyZWt0b3JhdGV0IE55a3RlciBsZWdla29udG9yMSYwJAYDVQQKEx1OeWt0ZXIgTGVnZWtvbnRvciAtIDUwMDAwMDAwMzEfMB0GA1UEBxMWVGVzdHZlaWVuIDEsIDAxMDEgT3NsbzELMAkGA1UEBhMCTk8wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCIjXQp9RY2rHshgC7FWpGhyyLuJj0CqDxAiU/2ZDLHRxF54+nkesQHn5YdIhrum2g3BLLX4unxOFyLY2Jsc96lgDIBCuL/R7swX3JDsTvjOyIzJ7s9xmMtpyCk+kJntd8AHu46QxHxVGVuH0jRv/LDlK+oy1Wlx2rUZTOFdpNdEOasWqntq+NC9BQSh7K6t2QvmrE0yNRA8vv95cii24u4fcPa5am1XRCQRT47bSY+J9N828dtjB41jcAy0U+ehiAzaEekRdoIBmDPyq2HC6fBwubeDkjpVnRsP12VLa+l8FjvE09tvbjma6v/ihWUT36gjJPpn6XgEWupLbehFewBAgMBAAGjggIwMIICLDCB2AYIKwYBBQUHAQEEgcswgcgwSQYIKwYBBQUHMAKGPWh0dHA6Ly9jcmwxLnRlc3QuY29tbWZpZGVzLmNvbS9Db21tZmlkZXNFbnRlcnByaXNlLVNIQTI1Ni5jcnQwSQYIKwYBBQUHMAKGPWh0dHA6Ly9jcmwyLnRlc3QuY29tbWZpZGVzLmNvbS9Db21tZmlkZXNFbnRlcnByaXNlLVNIQTI1Ni5jcnQwMAYIKwYBBQUHMAGGJGh0dHA6Ly9vY3NwMS50ZXN0LmNvbW1maWRlcy5jb20vb2NzcDAdBgNVHQ4EFgQUihYVM8HvekCmj1JWQBUHtrHlHeUwDAYDVR0TAQH/BAIwADAfBgNVHSMEGDAWgBR/stYtZW5Q/CtrDJOHJXKU9gBELzAXBgNVHSAEEDAOMAwGCmCEQgEdhxEBAQAwgZUGA1UdHwSBjTCBijBDoEGgP4Y9aHR0cDovL2NybDEudGVzdC5jb21tZmlkZXMuY29tL0NvbW1maWRlc0VudGVycHJpc2UtU0hBMjU2LmNybDBDoEGgP4Y9aHR0cDovL2NybDIudGVzdC5jb21tZmlkZXMuY29tL0NvbW1maWRlc0VudGVycHJpc2UtU0hBMjU2LmNybDAOBgNVHQ8BAf8EBAMCAzgwJwYDVR0lBCAwHgYIKwYBBQUHAwEGCCsGAQUFBwMCBggrBgEFBQcDBDAXBgNVHREEEDAOgQxwb3N0QHRlc3Qubm8wDQYJKoZIhvcNAQELBQADggEBAAolu0fm7yzvqwU9vUTd/h1fgkPrJDa1iu9ZLgbGV7qPBuX0SfHCjabLF+iBV6YRJN/O9heTgGAtFw4NAIilSEEP3kwGFORgeHq+FnfEiu63Ij555P3cvZWJOQusbhBv7QFkeroHFmQgIuxorTk4rs5NQGVbWJCham2C+6iAztJ+7WECfcDwbTVs4/wQ8D+aZhY7PWhVgJEu/vUilFDgu6d/h4ym/0HA3rCbHa5fupJ5EpvwMEMxnYq6ZOKcMgQIahs0fs3e1qqXYuPXUHEviEpA6pBBv+JWaitKz/SVPUJ1m3EyErRFEef53H1AqG3+Vsz5EQglMFIwRApcJ/gWkfY=",
            b"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",
            b"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",
        ]
        certs = [
            QualifiedCertificate(
                MaybeInvalidCertificate.create(b64decode(cert)),
                LdapCertificateEntry(
                    "",
                    b64decode(cert),
                    None,
                    LdapServer("", "", CertificateAuthority.COMMFIDES, []),
                ),
                CertificateStatus.EXPIRED,
                None,
            )
            for cert in raw_certs
        ]

        cert_sets = QualifiedCertificateSet.create_sets_from_certs(certs)
        assert len(cert_sets) == 3

    def test_get_non_encryption_cert_seid1(self) -> None:
        raw_certs = [
            # crypt
            b"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",
            # auth
            b"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",
            # sign
            b"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",
        ]
        certs = [
            QualifiedCertificate(
                MaybeInvalidCertificate.create(b64decode(cert)),
                LdapCertificateEntry(
                    "",
                    b64decode(cert),
                    None,
                    LdapServer("", "", CertificateAuthority.COMMFIDES, []),
                ),
                CertificateStatus.EXPIRED,
                None,
            )
            for cert in raw_certs
        ]
        non_encryption_cert = QualifiedCertificateSet._get_non_encryption_cert(certs)
        assert "Key encipherment" not in non_encryption_cert.get_key_usages()
        assert CertificateRoles.CRYPT not in non_encryption_cert.roles

    def test_get_non_encryption_cert_seid2(self) -> None:
        raw_certs = [
            read_pem_file("tests/resources/cert_personal_seid2_krypt.pem"),
            read_pem_file("tests/resources/cert_personal_seid2_sign.pem"),
        ]
        certs = [
            QualifiedCertificate(
                MaybeInvalidCertificate.create(cert),
                LdapCertificateEntry(
                    "",
                    cert,
                    None,
                    LdapServer("", "", CertificateAuthority.BUYPASS, []),
                ),
                CertificateStatus.EXPIRED,
                None,
            )
            for cert in raw_certs
        ]
        non_encryption_cert = QualifiedCertificateSet._get_non_encryption_cert(certs)
        assert "Key encipherment" not in non_encryption_cert.get_key_usages()
        assert CertificateRoles.CRYPT not in non_encryption_cert.roles

    @pytest.mark.parametrize(
        ["file_path", "invalid_subject", "invalid_exts"],
        [
            ("tests/resources/cert_with_invalid_subject.pem", True, False),
            ("tests/resources/cert_with_invalid_extensions.pem", False, True),
            (
                "tests/resources/cert_with_invalid_subject_and_extensions.pem",
                True,
                True,
            ),
        ],
    )
    def test_invalid_cert(
        self, file_path: str, *, invalid_subject: bool, invalid_exts: bool
    ) -> None:
        raw_cert = read_pem_file(file_path)
        qcert = QualifiedCertificate(
            MaybeInvalidCertificate.create(raw_cert),
            LdapCertificateEntry(
                "",
                raw_cert,
                None,
                LdapServer("", "", CertificateAuthority.BUYPASS, []),
            ),
            CertificateStatus.UNKNOWN,
            None,
        )
        if invalid_subject:
            assert qcert.print_subject(full=False) == ""
            assert qcert.print_subject(full=True) == ""

        if invalid_exts:
            assert qcert.get_key_usages() == ""
            assert qcert.get_extended_key_usages() == ""
            assert qcert.seid == SEID.UNKNOWN
            assert qcert.roles == []
            assert qcert.type == CertType.UNKNOWN

        [qcert_set] = QualifiedCertificateSet.create_sets_from_certs([qcert])
        assert qcert_set.status == CertificateStatus.INVALID

    def test_ldap_url(self) -> None:
        raw_certs = [
            read_pem_file("tests/resources/cert_personal_seid2_krypt.pem"),
            read_pem_file("tests/resources/cert_personal_seid2_sign.pem"),
        ]
        certs = [
            QualifiedCertificate(
                MaybeInvalidCertificate.create(cert),
                LdapCertificateEntry(
                    f"serial={x},ou=certs,dc=watn,dc=no",
                    cert,
                    str(x),
                    LdapServer(
                        "ldap://ldap.watn.no",
                        "ou=certs,dc=watn,dc=no",
                        CertificateAuthority.BUYPASS,
                        [],
                    ),
                ),
                CertificateStatus.EXPIRED,
                None,
            )
            for (x, cert) in enumerate(raw_certs)
        ]
        [qcert] = QualifiedCertificateSet.create_sets_from_certs(certs)
        assert (
            qcert.ldap
            == "ldap://ldap://ldap.watn.no/ou=certs,dc=watn,dc=no?usercertificate;binary?sub?"
            "(|(certificateSerialNumber=0)(certificateSerialNumber=1))"
        )

    def test_ldap_url_one_cert_without_serial(self) -> None:
        raw_certs = [
            read_pem_file("tests/resources/cert_personal_seid2_krypt.pem"),
            read_pem_file("tests/resources/cert_personal_seid2_sign.pem"),
        ]
        certs = [
            QualifiedCertificate(
                MaybeInvalidCertificate.create(cert),
                LdapCertificateEntry(
                    f"serial={x},ou=certs,dc=watn,dc=no",
                    cert,
                    str(x)
                    if x
                    else None,  # 0 is falsey, so one will have and one wont),
                    LdapServer(
                        "ldap://ldap.watn.no",
                        "ou=certs,dc=watn,dc=no",
                        CertificateAuthority.BUYPASS,
                        [],
                    ),
                ),
                CertificateStatus.EXPIRED,
                None,
            )
            for (x, cert) in enumerate(raw_certs)
        ]
        [qcert] = QualifiedCertificateSet.create_sets_from_certs(certs)
        assert qcert.ldap is None

    def test_ldap_url_serialnumbers_need_escaping(self) -> None:
        """
        Serial numbers don't normally consist of funky chars, but we don't really have
        any control over that, as it's just delivered to us via ldap. So we should handle
        if they have some funky chars in them.
        """
        raw_cert = read_pem_file("tests/resources/cert_personal_seid2_krypt.pem")

        cert = QualifiedCertificate(
            MaybeInvalidCertificate.create(raw_cert),
            LdapCertificateEntry(
                "dn=true",
                raw_cert,
                "this is not a serial number?",
                LdapServer(
                    "ldap://ldap.watn.no",
                    "ou=certs,dc=watn,dc=no",
                    CertificateAuthority.BUYPASS,
                    [],
                ),
            ),
            CertificateStatus.EXPIRED,
            None,
        )

        [qcert] = QualifiedCertificateSet.create_sets_from_certs([cert])
        assert (
            qcert.ldap
            == "ldap://ldap://ldap.watn.no/ou=certs,dc=watn,dc=no?usercertificate;binary?sub?"
            "(certificateSerialNumber=this%20is%20not%20a%20serial%20number%3F)"
        )

    def test_ldap_url_base_need_escaping(self) -> None:
        raw_cert = read_pem_file("tests/resources/cert_personal_seid2_krypt.pem")

        cert = QualifiedCertificate(
            MaybeInvalidCertificate.create(raw_cert),
            LdapCertificateEntry(
                "dn=true",
                raw_cert,
                "1234",
                LdapServer(
                    "ldap://ldap.watn.no",
                    "o=An Example\\2C Inc.,c=US",
                    CertificateAuthority.BUYPASS,
                    [],
                ),
            ),
            CertificateStatus.EXPIRED,
            None,
        )

        [qcert] = QualifiedCertificateSet.create_sets_from_certs([cert])
        assert (
            qcert.ldap
            == "ldap://ldap://ldap.watn.no/o=An%20Example%5C2C%20Inc.,c=US?usercertificate;binary?sub?"
            "(certificateSerialNumber=1234)"
        )
